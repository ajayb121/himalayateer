{"version":3,"sources":["components/login-screen/index.jsx","components/common/primaryLayout.jsx","components/admin-actions/index.jsx","components/results/dummyData.jsx","components/results/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Component","Layout","styled","div","Logo","PrimaryLayout","this","props","children","data","date","firstRound","secondRound","columns","Header","accessor","Wrapper","ResultsRegion","TableWrapper","Title","ResultsComponent","pageSize","length","showPagination","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAI4CA,Y,sZCD5C,IAAMC,EAASC,IAAOC,IAAV,KAONC,EAAOF,IAAOC,IAAV,KAWWE,E,iLAEjB,OACE,6BACE,kBAACJ,EAAD,KACE,kBAACG,EAAD,uBAEDE,KAAKC,MAAMC,c,GAPuBR,a,2BCjBCA,Y,aCF/BS,G,MAAO,CAAC,CACjBC,KAAM,aACNC,WAAY,GACZC,YAAa,IAEf,CACEF,KAAM,aACNC,WAAY,GACZC,YAAa,IAEf,CACEF,KAAM,aACNC,WAAY,GACZC,YAAa,IAEf,CACEF,KAAM,aACNC,WAAY,GACZC,YAAa,IAEf,CACEF,KAAM,aACNC,WAAY,GACZC,YAAa,IAEf,CACEF,KAAM,aACNC,WAAY,GACZC,YAAa,IAEf,CACEF,KAAM,aACNC,WAAY,GACZC,YAAa,IAEf,CACEF,KAAM,aACNC,WAAY,GACZC,YAAa,IAEf,CACEF,KAAM,aACNC,WAAY,GACZC,YAAa,IAEf,CACEF,KAAM,aACNC,WAAY,GACZC,YAAa,IAEf,CACEF,KAAM,aACNC,WAAY,GACZC,YAAa,IAEf,CACEF,KAAM,aACNC,WAAY,GACZC,YAAa,IAEf,CACEF,KAAM,aACNC,WAAY,GACZC,YAAa,IAEf,CACEF,KAAM,aACNC,WAAY,GACZC,YAAa,IAEf,CACEF,KAAM,aACNC,WAAY,GACZC,YAAa,IAEf,CACEF,KAAM,aACNC,WAAY,GACZC,YAAa,MAIFC,EAAU,CAAC,CACtBC,OAAQ,OACRC,SAAU,QACT,CACDD,OAAQ,MACRC,SAAU,cACT,CACDD,OAAQ,MACRC,SAAU,gB,6dCrFd,IAAMC,EAAUd,IAAOC,IAAV,KAOPc,EAAgBf,IAAOC,IAAV,KAIbe,EAAehB,IAAOC,IAAV,KAKZgB,EAAQjB,IAAOC,IAAV,KAKUiB,E,iLAEjB,OACE,kBAACJ,EAAD,KACE,kBAACC,EAAD,KACE,kBAACE,EAAD,0BAGA,kBAACD,EAAD,KACE,kBAAC,IAAD,CACET,KAAMA,EACNI,QAASA,EACTQ,SAAUZ,EAAKa,OACfC,gBAAgB,MAItB,kBAACN,EAAD,KACE,kBAACE,EAAD,uBAGA,kBAACD,EAAD,KACE,kBAAC,IAAD,CACET,KAAMA,EACNI,QAASA,EACTQ,SAAUZ,EAAKa,OACfC,gBAAgB,MAItB,kBAACN,EAAD,KACE,kBAACE,EAAD,2BAGA,kBAACD,EAAD,KACE,kBAAC,IAAD,CACET,KAAMA,EACNI,QAASA,EACTQ,SAAUZ,EAAKa,OACfC,gBAAgB,W,GAvCgBvB,aCb/BwB,MARf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.60e7dbcc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nexport default class LoginComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: '',\n      password: '',\n      loginSuccess: false,\n      showError: false,\n      errorMessage: '',\n    };\n  }\n\n  onUserNameChange = (event) => {\n    this.setState({ userId: event.target.value });\n  }\n\n  onPasswordChange = (event) => {\n    this.setState({ password: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    const { userId, password } = this.state;\n    axios.post('/api/login/validate', {\n      userId,\n      password,\n    })\n    .then(({ data }) => {\n      const { loginSuccess } = data;\n      if(loginSuccess) {\n        this.setState({\n          showError: false,\n          loginSuccess,\n        });\n      } else {\n        this.setState({\n          showError: true,\n          errorMessage: \"Incorrect credentials! Please enter again.\"\n        });\n      }\n    })\n    .catch((error) => {\n      this.setState({\n        showError: true,\n        errorMessage: \"Something went wrong! Please reload the page.\"\n      });\n    });\n    event.preventDefault();\n  }\n\n  render() {\n    const { showError, errorMessage } = this.state;\n    return (\n      <div>\n        <div>\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              Name:\n          <input type=\"text\" value={this.state.userId} onChange={this.onUserNameChange} />\n            </label>\n            <label>\n              Password:\n          <input type=\"password\" value={this.state.password} onChange={this.onPasswordChange} />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n        </div>\n        {showError && (\n        <div>\n          {errorMessage}\n        </div>\n        )}\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst Layout = styled.div`\n  height: 50px;\n  background: #65baec7d;\n  display: flex;\n  align-items: center;\n`;\n\nconst Logo = styled.div`\n  cursor: pointer;\n  padding-left: 50px;\n  font-size: 18px;\n  color: #1734d4;\n  font-weight: bold;\n  @media (max-width: 768px) {\n    padding-left: 20px;\n  }\n`;\n\nexport default class PrimaryLayout extends Component {\n  render() {\n    return (\n      <div>\n        <Layout>\n          <Logo>Himalaya Teer</Logo>\n        </Layout>\n        {this.props.children}\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport moment from 'moment';\nimport axios from 'axios';\n\nexport default class AdminComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      knFR: 0,\n      knSR: 0,\n      jwFR: 0,\n      jwSR: 0,\n      slFR: 0,\n      slSR: 0,\n      days: 1,\n    };\n  }\n\n  onChange = (type, event) => {\n    this.setState({ [type]: event.target.value });\n  }\n\n  onSubmitKhanapara = () => {\n    const { knFR: firstRound, knSR: secondRound, days } = this.state;\n    const date = {\n      day: parseInt(moment().subtract('days', days).format('DD')),\n      month: parseInt(moment().subtract('days', days).format('MM')),\n      year: parseInt(moment().subtract('days', days).format('YYYY')),\n    }\n    this.setState({ days: (days + 1) });\n    axios.post('/api/results/khanaparaResults', {\n      firstRound,\n      secondRound,\n      date\n    })\n      .then(({ data }) => {\n        debugger;\n        console.log(data);\n      })\n      .catch((error) => {\n        debugger;\n      });\n  }\n  onSubmitJowai = () => {\n    const { knFR: firstRound, knSR: secondRound, days } = this.state;\n    const date = {\n      day: parseInt(moment().subtract('days', days).format('DD')),\n      month: parseInt(moment().subtract('days', days).format('MM')),\n      year: parseInt(moment().subtract('days', days).format('YYYY')),\n    }\n    this.setState({ days: (days + 1) });\n    axios.post('/api/results/jowaiResults', {\n      firstRound,\n      secondRound,\n      date\n    })\n      .then(({ data }) => {\n        debugger;\n        console.log(data);\n      })\n      .catch((error) => {\n        debugger;\n      });\n  }\n  onSubmitShillong = () => {\n    const { knFR: firstRound, knSR: secondRound, days } = this.state;\n    const date = {\n      day: parseInt(moment().subtract('days', days).format('DD')),\n      month: parseInt(moment().subtract('days', days).format('MM')),\n      year: parseInt(moment().subtract('days', days).format('YYYY')),\n    }\n    this.setState({ days: (days + 1) });\n    axios.post('/api/results/shillongResults', {\n      firstRound,\n      secondRound,\n      date\n    })\n      .then(({ data }) => {\n        debugger;\n        console.log(data);\n      })\n      .catch((error) => {\n        debugger;\n      });\n  }\n  render() {\n    return (\n      <div>\n        Admin Actions\n        <div>\n          <div>\n            Khanapara Results:\n          <form id=\"bjhnj\" onSubmit={(event) => event.preventDefault()}>\n              <label>\n                First Round:\n          <input type=\"number\" id=\"knFR\" value={this.state.knFR} onChange={(event) => this.onChange('knFR', event)} />\n              </label>\n              <label>\n                Second Round:\n          <input type=\"number\" id=\"knSR\" value={this.state.knSR} onChange={(event) => this.onChange('knSR', event)} />\n              </label>\n              <button onClick={this.onSubmitKhanapara}>Submit</button>\n            </form>\n          </div>\n          <div>\n            Shillong Results:\n          <form onSubmit={(event) => event.preventDefault()}>\n              <label>\n                First Round:\n          <input type=\"number\" value={this.state.slFR} onChange={(event) => this.onChange('slFR', event)} />\n              </label>\n              <label>\n                Second Round:\n          <input type=\"number\" value={this.state.slSR} onChange={(event) => this.onChange('slSR', event)} />\n              </label>\n              <button onClick={this.onSubmitShillong}>Submit</button>\n            </form>\n          </div>\n          <div>\n            Jowai Results:\n          <form onSubmit={(event) => event.preventDefault()}>\n              <label>\n                First Round:\n          <input type=\"number\" value={this.state.jwFR} onChange={(event) => this.onChange('jwFR', event)} />\n              </label>\n              <label>\n                Second Round:\n          <input type=\"number\" value={this.state.jwSR} onChange={(event) => this.onChange('jwSR', event)} />\n              </label>\n              <button onClick={this.onSubmitJowai}>Submit</button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\n\nexport const data = [{\n    date: '23-08-2019',\n    firstRound: 34,\n    secondRound: 45,\n  },\n  {\n    date: '22-08-2019',\n    firstRound: 34,\n    secondRound: 45,\n  },\n  {\n    date: '21-08-2019',\n    firstRound: 34,\n    secondRound: 45,\n  },\n  {\n    date: '20-08-2019',\n    firstRound: 34,\n    secondRound: 45,\n  },\n  {\n    date: '19-08-2019',\n    firstRound: 34,\n    secondRound: 45,\n  },\n  {\n    date: '18-08-2019',\n    firstRound: 34,\n    secondRound: 45,\n  },\n  {\n    date: '17-08-2019',\n    firstRound: 34,\n    secondRound: 45,\n  },\n  {\n    date: '16-08-2019',\n    firstRound: 34,\n    secondRound: 45,\n  },\n  {\n    date: '15-08-2019',\n    firstRound: 34,\n    secondRound: 45,\n  },\n  {\n    date: '14-08-2019',\n    firstRound: 34,\n    secondRound: 45,\n  },\n  {\n    date: '13-08-2019',\n    firstRound: 34,\n    secondRound: 45,\n  },\n  {\n    date: '12-08-2019',\n    firstRound: 34,\n    secondRound: 45,\n  },\n  {\n    date: '11-08-2019',\n    firstRound: 34,\n    secondRound: 45,\n  },\n  {\n    date: '10-08-2019',\n    firstRound: 34,\n    secondRound: 45,\n  },\n  {\n    date: '09-08-2019',\n    firstRound: 34,\n    secondRound: 45,\n  },\n  {\n    date: '08-08-2019',\n    firstRound: 34,\n    secondRound: 45,\n  },\n]\n\n  export const columns = [{\n    Header: 'Date',\n    accessor: 'date' // String-based value accessors!\n  }, {\n    Header: 'F/R',\n    accessor: 'firstRound',\n  }, {\n    Header: 'S/R', // Required because our accessor is not a string\n    accessor: 'secondRound',\n  }, \n  // {\n  //   Header: props => <span>Friend Age</span>, // Custom header components!\n  //   accessor: 'friend.age'\n  // }\n]","import React, { Component } from 'react';\nimport 'react-table/react-table.css';\nimport ReactTable from 'react-table';\nimport styled from 'styled-components';\nimport './styles.css';\nimport { data, columns } from './dummyData';\n\nconst Wrapper = styled.div`\n  padding: 30px 50px;\n  @media (max-width: 768px) {\n    padding: 30px 20px;\n  }\n`;\n\nconst ResultsRegion = styled.div`\n  padding-bottom: 30px;\n`;\n\nconst TableWrapper = styled.div`\n  padding-top: 10px;\n  max-width: 500px;\n`;\n\nconst Title = styled.div`\n  font-weight: 600;\n  font-size: 18px;\n`;\n\nexport default class ResultsComponent extends Component {\n  render() {\n    return (\n      <Wrapper>\n        <ResultsRegion>\n          <Title>\n            Shillong Results:\n          </Title>\n          <TableWrapper>\n            <ReactTable\n              data={data}\n              columns={columns}\n              pageSize={data.length}\n              showPagination={false}\n            />\n          </TableWrapper>\n        </ResultsRegion>\n        <ResultsRegion>\n          <Title>\n            Jowai Results:\n          </Title>\n          <TableWrapper>\n            <ReactTable\n              data={data}\n              columns={columns}\n              pageSize={data.length}\n              showPagination={false}\n            />\n          </TableWrapper>\n        </ResultsRegion>\n        <ResultsRegion>\n          <Title>\n            Khanapara Results:\n          </Title>\n          <TableWrapper>\n            <ReactTable\n              data={data}\n              columns={columns}\n              pageSize={data.length}\n              showPagination={false}\n            />\n          </TableWrapper>\n        </ResultsRegion>\n      </Wrapper>\n    );\n  }\n}","import React from 'react';\nimport './App.css';\nimport LoginComponent from './components/login-screen';\nimport PrimaryLayout from './components/common/primaryLayout';\nimport AdminComponent from './components/admin-actions';\nimport ResultsComponent from './components/results';\n\nfunction App() {\n  return (\n    <PrimaryLayout>\n      <ResultsComponent />\n    </PrimaryLayout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}